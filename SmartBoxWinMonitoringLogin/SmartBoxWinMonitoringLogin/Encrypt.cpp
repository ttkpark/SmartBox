#include "pch.h"
#include "Encrypt.h"
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
//#include <endian.h>
#include <iostream>



#ifdef _DEBUG
#define new DEBUG_NEW
#endif



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// macro constants and pre-defines.

static const char MimeBase64[] = {
 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
 'w', 'x', 'y', 'z', '0', '1', '2', '3',
 '4', '5', '6', '7', '8', '9', '+', '/'
};

static int DecodeMimeBase64[256] = {
 -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
 -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
 -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,63,
 52,53,54,55,56,57,58,59,60,61,-1,-1,-1,-1,-1,-1,
 -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,
 15,16,17,18,19,20,21,22,23,24,25,-1,-1,-1,-1,-1,
 -1,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,
 41,42,43,44,45,46,47,48,49,50,51,-1,-1,-1,-1,-1,
 -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
 -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
 -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
 -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
 -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
 -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
 -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
 -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
};

typedef union {
    struct {
#ifdef LITTLEENDIAN
        unsigned char c1, c2, c3;
#else
        unsigned char c3, c2, c1;
#endif
    };
    struct {
#ifdef LITTLEENDIAN
        unsigned int e1 : 6, e2 : 6, e3 : 6, e4 : 6;
#else
        unsigned int e4 : 6, e3 : 6, e2 : 6, e1 : 6;
#endif
    };
} UST_BUF;



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// encoder
int Encrypt::_base64enc(const char* pSrcBuf, UINT nSrcSize, char** ppResult)
{
    ASSERT(pSrcBuf != nullptr);

    UINT nSize = 0;
    UST_BUF tempBuf;

    if (nSrcSize > 0)
    {
        nSize = (4 * (nSrcSize / 3)) + (nSrcSize % 3 ? 4 : 0) + 1;

        (*ppResult) = new char[nSize];

        UINT j = 0;
        for (UINT i = 0; i < nSrcSize; i = i + 3, j = j + 4)
        {
            tempBuf.c3 = pSrcBuf[i];
            if ((i + 1) > nSrcSize)
                tempBuf.c2 = 0;
            else
                tempBuf.c2 = pSrcBuf[i + 1];

            if ((i + 2) > nSrcSize)
                tempBuf.c1 = 0;
            else
                tempBuf.c1 = pSrcBuf[i + 2];

            (*ppResult)[j] = MimeBase64[tempBuf.e4];
            (*ppResult)[j + 1] = MimeBase64[tempBuf.e3];
            (*ppResult)[j + 2] = MimeBase64[tempBuf.e2];
            (*ppResult)[j + 3] = MimeBase64[tempBuf.e1];

            if ((i + 2) > nSrcSize)
                (*ppResult)[j + 2] = '=';
            if ((i + 3) > nSrcSize)
                (*ppResult)[j + 3] = '=';
        }

        (*ppResult)[nSize - 1] = 0;
    }
    else
    {
        ASSERT(0);
    }

    return nSize;
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// decoder
void Encrypt::_base64dec(const char* pSrcBuf, UINT nSrcSize, OUT BYTE** ppResult, OUT UINT* pnLength)
{
    ASSERT(nSrcSize > 0);

    // init
    *ppResult = nullptr;
    *pnLength = 0;

    BYTE* pResult = nullptr;

    int j = 0, nBlank = 0;
    UST_BUF temp;

    // out buffer를 여기서 직접 생성하기로 한다.
    const UINT nOutBufSize = nSrcSize * 3 / 4 + 1;
    if (nOutBufSize > 0)
    {
        pResult = new BYTE[nOutBufSize];
        ASSERT(pResult);

        for (UINT i = 0; i < nSrcSize; i = i + 4, j = j + 3)
        {
            temp.e4 = DecodeMimeBase64[pSrcBuf[i]];
            temp.e3 = DecodeMimeBase64[pSrcBuf[i + 1]];
            if (pSrcBuf[i + 2] == '=')
            {
                temp.e2 = 0;
                nBlank++;
            }
            else
                temp.e2 = DecodeMimeBase64[pSrcBuf[i + 2]];

            if (pSrcBuf[i + 3] == '=')
            {
                temp.e1 = 0;
                nBlank++;
            }
            else
                temp.e1 = DecodeMimeBase64[pSrcBuf[i + 3]];

            pResult[j] = temp.c3;
            pResult[j + 1] = temp.c2;
            pResult[j + 2] = temp.c1;
        }
    }

    // check and set results to return.
    if (j - nBlank > 0)
    {
        *pnLength = j - nBlank;
        ASSERT(*pnLength <= nOutBufSize - 1);

        *ppResult = (BYTE*)pResult;
    }
    else
    {
        // clear
        if (pResult)
        {
            delete pResult;
            pResult = nullptr;
        }
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Unicode(Wide char)를 UTF-8로 변환하는 함수. (출처 기억 안남)
void wstrToUtf8(std::string& dest, const std::wstring& src)
{
    dest.clear();

    for (size_t i = 0; i < src.size(); i++)
    {
        wchar_t w = src[i];
        if (w <= 0x7f)
            dest.push_back((char)w);
        else if (w <= 0x7ff)
        {
            dest.push_back(0xc0 | ((w >> 6) & 0x1f));
            dest.push_back(0x80 | (w & 0x3f));
        }
        else if (w <= 0xffff)
        {
            dest.push_back(0xe0 | ((w >> 6 >> 6) & 0x0f));
            dest.push_back(0x80 | ((w >> 6) & 0x3f));
            dest.push_back(0x80 | (w & 0x3f));
        }
        else if (w <= 0x10ffff)
        {
            dest.push_back(0xf0 | ((w >> 6 >> 6 >> 6) & 0x07));
            dest.push_back(0x80 | ((w >> 6 >> 6) & 0x3f));
            dest.push_back(0x80 | ((w >> 6) & 0x3f));
            dest.push_back(0x80 | (w & 0x3f));
        }
        else
            dest.push_back('?');
    }
}

std::string wstrToUtf8(const std::wstring& str)
{
    std::string result;
    wstrToUtf8(result, str);
    return result;
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Encoding
// from Unicode character to TCHAR.
CString Encrypt::Encoding(LPCWSTR lpszSrc)
{
    CString strReturn;

    // UTF8로 먼저 변환.
    std::wstring strWide = lpszSrc;
    std::string strUtf8 = wstrToUtf8(strWide);

    char* pResult = nullptr;
    const UINT nSize = static_cast<UINT>(strUtf8.length());
    const UINT nConvSize = _base64enc(strUtf8.c_str(), nSize, &pResult);

    if (pResult && nConvSize > 0)
    {
        // TCHAR로 변환
        char* pCpy = new char[nConvSize + 1];
        ::ZeroMemory(pCpy, nConvSize + 1);

        memcpy_s(pCpy, nConvSize + 1, pResult, nConvSize);

        strReturn = CA2T((LPSTR)pCpy);

        delete[] pCpy;
        delete[] pResult;
    }

    return strReturn;
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Encoding
// from Bytes data to TCHAR
CString Encrypt::Encoding(const BYTE* pSrcBytes, UINT nLength)
{
    CString strReturn;

    char* pResult = nullptr;
    const UINT nConvSize = _base64enc((char*)pSrcBytes, nLength, &pResult);

    if (pResult && nConvSize > 0)
    {
        // TCHAR로 변환
        char* pCpy = new char[nConvSize + 1];
        ::ZeroMemory(pCpy, nConvSize + 1);

        memcpy_s(pCpy, nConvSize + 1, pResult, nConvSize);

        strReturn = CA2T((LPSTR)pCpy);

        delete[] pCpy;
        delete[] pResult;
    }

    return strReturn;
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Decoding
CString Encrypt::Decoding(LPCWSTR lpszSrc)
{
    CString strReturn;

    // UTF8로 먼저 변환.
    std::wstring strWide = lpszSrc;
    std::string strUtf8 = wstrToUtf8(strWide);

    const UINT nSize = static_cast<UINT>(strUtf8.length());
    BYTE* pResult = nullptr;
    UINT nConvSize = 0;

    // decoding
    _base64dec(strUtf8.c_str(), nSize, &pResult, &nConvSize);

    // TCHAR로 변경.
    if (pResult && nConvSize > 0)
    {
        // 끝에 null 문자열을 붙이기 위해서 복사.
        char* pCpy = new char[nConvSize + 1];
        ::ZeroMemory(pCpy, nConvSize + 1);

        memcpy_s(pCpy, nConvSize + 1, pResult, nConvSize);

        strReturn = CA2T((LPSTR)pCpy);

        delete[] pCpy;
        delete[] pResult;
    }
    else
    {
        ASSERT(0);
    }

    return strReturn;
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Decoding
void Encrypt::Decoding(LPCWSTR lpszSrc, OUT BYTE** ppResult, OUT UINT& nLength)
{
    // UTF8로 먼저 변환.
    std::wstring strWide = lpszSrc;
    std::string strUtf8 = wstrToUtf8(strWide);

    const UINT nSize = static_cast<UINT>(strUtf8.length());
    UINT nConvSize = 0;

    // decoding
    _base64dec(strUtf8.c_str(), nSize, ppResult, &nConvSize);

    if (nConvSize > 0)
    {
        nLength = nConvSize;
        ASSERT(*ppResult);
    }
    else
    {
        ASSERT(*ppResult == nullptr);
    }
}


#pragma region Packet 암호화 매트릭스

char array890[9][8] = {
                                     { 'i', 'D', '8', 'a', '.', 'W', 'j', '0' }
                                   , { '7', 'l', 'z', 'I', 'b', 'T', 'g', 'o' }
                                   , { '/', '9', '3', 'q', 'F', 'X', 'm', 'e' }
                                   , { 'C', 'L', '_', 'V', 'h', '4', 'w', 'u' }
                                   , { 'N', 'O', 's', '5', 't', 'Q', 'Z', 'd' }
                                   , { 'p', 'B', '^', 'U', 'f', '2', 'k', 'M' }
                                   , { 'K', 'G', 'R', '6', '-', 'x', 'A', 'S' }
                                   , { 'J', '1', 'c', 'y', 'H', 'Y', '=', 'P' }
                                   , { 'E', '|', 'r', '!', 'v', '(', 'n', ')' } };
char array891[9][8] = {
                                     { 'E', '|', 'r', '!', 'v', '(', 'n', ')' }
                                   , { 'i', 'D', '8', 'a', '.', 'W', 'j', '0' }
                                   , { '7', 'l', 'z', 'I', 'b', 'T', 'g', 'o' }
                                   , { '/', '9', '3', 'q', 'F', 'X', 'm', 'e' }
                                   , { 'C', 'L', '_', 'V', 'h', '4', 'w', 'u' }
                                   , { 'N', 'O', 's', '5', 't', 'Q', 'Z', 'd' }
                                   , { 'p', 'B', '^', 'U', 'f', '2', 'k', 'M' }
                                   , { 'K', 'G', 'R', '6', '-', 'x', 'A', 'S' }
                                   , { 'J', '1', 'c', 'y', 'H', 'Y', '=', 'P' }
};
char array892[9][8] = {
                                     { 'J', '1', 'c', 'y', 'H', 'Y', '=', 'P' }
                                   , { 'E', '|', 'r', '!', 'v', '(', 'n', ')' }
                                   , { 'i', 'D', '8', 'a', '.', 'W', 'j', '0' }
                                   , { '7', 'l', 'z', 'I', 'b', 'T', 'g', 'o' }
                                   , { '/', '9', '3', 'q', 'F', 'X', 'm', 'e' }
                                   , { 'C', 'L', '_', 'V', 'h', '4', 'w', 'u' }
                                   , { 'N', 'O', 's', '5', 't', 'Q', 'Z', 'd' }
                                   , { 'p', 'B', '^', 'U', 'f', '2', 'k', 'M' }
                                   , { 'K', 'G', 'R', '6', '-', 'x', 'A', 'S' }
};
char array893[9][8] = {
                                     { 'K', 'G', 'R', '6', '-', 'x', 'A', 'S' }
                                   , { 'J', '1', 'c', 'y', 'H', 'Y', '=', 'P' }
                                   , { 'E', '|', 'r', '!', 'v', '(', 'n', ')' }
                                   , { 'i', 'D', '8', 'a', '.', 'W', 'j', '0' }
                                   , { '7', 'l', 'z', 'I', 'b', 'T', 'g', 'o' }
                                   , { '/', '9', '3', 'q', 'F', 'X', 'm', 'e' }
                                   , { 'C', 'L', '_', 'V', 'h', '4', 'w', 'u' }
                                   , { 'N', 'O', 's', '5', 't', 'Q', 'Z', 'd' }
                                   , { 'p', 'B', '^', 'U', 'f', '2', 'k', 'M' }
};
char array894[9][8] = {
                                     { 'p', 'B', '^', 'U', 'f', '2', 'k', 'M' }
                                   , { 'K', 'G', 'R', '6', '-', 'x', 'A', 'S' }
                                   , { 'J', '1', 'c', 'y', 'H', 'Y', '=', 'P' }
                                   , { 'E', '|', 'r', '!', 'v', '(', 'n', ')' }
                                   , { 'i', 'D', '8', 'a', '.', 'W', 'j', '0' }
                                   , { '7', 'l', 'z', 'I', 'b', 'T', 'g', 'o' }
                                   , { '/', '9', '3', 'q', 'F', 'X', 'm', 'e' }
                                   , { 'C', 'L', '_', 'V', 'h', '4', 'w', 'u' }
                                   , { 'N', 'O', 's', '5', 't', 'Q', 'Z', 'd' }
};
char array895[9][8] = {
                                     { 'N', 'O', 's', '5', 't', 'Q', 'Z', 'd' }
                                   , { 'p', 'B', '^', 'U', 'f', '2', 'k', 'M' }
                                   , { 'K', 'G', 'R', '6', '-', 'x', 'A', 'S' }
                                   , { 'J', '1', 'c', 'y', 'H', 'Y', '=', 'P' }
                                   , { 'E', '|', 'r', '!', 'v', '(', 'n', ')' }
                                   , { 'i', 'D', '8', 'a', '.', 'W', 'j', '0' }
                                   , { '7', 'l', 'z', 'I', 'b', 'T', 'g', 'o' }
                                   , { '/', '9', '3', 'q', 'F', 'X', 'm', 'e' }
                                   , { 'C', 'L', '_', 'V', 'h', '4', 'w', 'u' }
};
char array896[9][8] = {
                                     { 'C', 'L', '_', 'V', 'h', '4', 'w', 'u' }
                                   , { 'N', 'O', 's', '5', 't', 'Q', 'Z', 'd' }
                                   , { 'p', 'B', '^', 'U', 'f', '2', 'k', 'M' }
                                   , { 'K', 'G', 'R', '6', '-', 'x', 'A', 'S' }
                                   , { 'J', '1', 'c', 'y', 'H', 'Y', '=', 'P' }
                                   , { 'E', '|', 'r', '!', 'v', '(', 'n', ')' }
                                   , { 'i', 'D', '8', 'a', '.', 'W', 'j', '0' }
                                   , { '7', 'l', 'z', 'I', 'b', 'T', 'g', 'o' }
                                   , { '/', '9', '3', 'q', 'F', 'X', 'm', 'e' }
};
char array897[9][8] = {
                                     { '/', '9', '3', 'q', 'F', 'X', 'm', 'e' }
                                   , { 'C', 'L', '_', 'V', 'h', '4', 'w', 'u' }
                                   , { 'N', 'O', 's', '5', 't', 'Q', 'Z', 'd' }
                                   , { 'p', 'B', '^', 'U', 'f', '2', 'k', 'M' }
                                   , { 'K', 'G', 'R', '6', '-', 'x', 'A', 'S' }
                                   , { 'J', '1', 'c', 'y', 'H', 'Y', '=', 'P' }
                                   , { 'E', '|', 'r', '!', 'v', '(', 'n', ')' }
                                   , { 'i', 'D', '8', 'a', '.', 'W', 'j', '0' }
                                   , { '7', 'l', 'z', 'I', 'b', 'T', 'g', 'o' }
};
char array898[9][8] = {
                                     { '7', 'l', 'z', 'I', 'b', 'T', 'g', 'o' }
                                   , { '/', '9', '3', 'q', 'F', 'X', 'm', 'e' }
                                   , { 'C', 'L', '_', 'V', 'h', '4', 'w', 'u' }
                                   , { 'N', 'O', 's', '5', 't', 'Q', 'Z', 'd' }
                                   , { 'p', 'B', '^', 'U', 'f', '2', 'k', 'M' }
                                   , { 'K', 'G', 'R', '6', '-', 'x', 'A', 'S' }
                                   , { 'J', '1', 'c', 'y', 'H', 'Y', '=', 'P' }
                                   , { 'E', '|', 'r', '!', 'v', '(', 'n', ')' }
                                   , { 'i', 'D', '8', 'a', '.', 'W', 'j', '0' }
};
char array899[9][8] = {
                                     { '/', '9', '3', 'q', 'F', 'X', 'm', 'e' }
                                   , { 'p', 'B', '^', 'U', 'f', '2', 'k', 'M' }
                                   , { '7', 'l', 'z', 'I', 'b', 'T', 'g', 'o' }
                                   , { 'E', '|', 'r', '!', 'v', '(', 'n', ')' }
                                   , { 'J', '1', 'c', 'y', 'H', 'Y', '=', 'P' }
                                   , { 'C', 'L', '_', 'V', 'h', '4', 'w', 'u' }
                                   , { 'N', 'O', 's', '5', 't', 'Q', 'Z', 'd' }
                                   , { 'K', 'G', 'R', '6', '-', 'x', 'A', 'S' }
                                   , { 'i', 'D', '8', 'a', '.', 'W', 'j', '0' }
};
char array900[8][9] = {
                                     { 'i', '7', '/', 'C', 'N', 'p', 'K', 'J', 'E' }
                                   , { 'D', 'l', '9', 'L', 'O', 'B', 'G', '1', '|' }
                                   , { '8', 'z', '3', '_', 's', '^', 'R', 'c', 'r' }
                                   , { 'a', 'I', 'q', 'V', '5', 'U', '6', 'y', '!' }
                                   , { '.', 'b', 'F', 'h', 't', 'f', '-', 'H', 'v' }
                                   , { 'W', 'T', 'X', '4', 'Q', '2', 'x', 'Y', '(' }
                                   , { 'j', 'g', 'm', 'w', 'Z', 'k', 'A', '=', 'n' }
                                   , { '0', 'o', 'e', 'u', 'd', 'M', 'S', 'P', ')' } };
char array901[8][9] = {
                                     { '0', 'o', 'e', 'u', 'd', 'M', 'S', 'P', ')' }
                                   , { 'i', '7', '/', 'C', 'N', 'p', 'K', 'J', 'E' }
                                   , { 'D', 'l', '9', 'L', 'O', 'B', 'G', '1', '|' }
                                   , { '8', 'z', '3', '_', 's', '^', 'R', 'c', 'r' }
                                   , { 'a', 'I', 'q', 'V', '5', 'U', '6', 'y', '!' }
                                   , { '.', 'b', 'F', 'h', 't', 'f', '-', 'H', 'v' }
                                   , { 'W', 'T', 'X', '4', 'Q', '2', 'x', 'Y', '(' }
                                   , { 'j', 'g', 'm', 'w', 'Z', 'k', 'A', '=', 'n' }
};
char array902[8][9] = {
                                     { 'j', 'g', 'm', 'w', 'Z', 'k', 'A', '=', 'n' }
                                   , { '0', 'o', 'e', 'u', 'd', 'M', 'S', 'P', ')' }
                                   , { 'i', '7', '/', 'C', 'N', 'p', 'K', 'J', 'E' }
                                   , { 'D', 'l', '9', 'L', 'O', 'B', 'G', '1', '|' }
                                   , { '8', 'z', '3', '_', 's', '^', 'R', 'c', 'r' }
                                   , { 'a', 'I', 'q', 'V', '5', 'U', '6', 'y', '!' }
                                   , { '.', 'b', 'F', 'h', 't', 'f', '-', 'H', 'v' }
                                   , { 'W', 'T', 'X', '4', 'Q', '2', 'x', 'Y', '(' }
};
char array903[8][9] = {
                                     { 'W', 'T', 'X', '4', 'Q', '2', 'x', 'Y', '(' }
                                   , { 'j', 'g', 'm', 'w', 'Z', 'k', 'A', '=', 'n' }
                                   , { '0', 'o', 'e', 'u', 'd', 'M', 'S', 'P', ')' }
                                   , { 'i', '7', '/', 'C', 'N', 'p', 'K', 'J', 'E' }
                                   , { 'D', 'l', '9', 'L', 'O', 'B', 'G', '1', '|' }
                                   , { '8', 'z', '3', '_', 's', '^', 'R', 'c', 'r' }
                                   , { 'a', 'I', 'q', 'V', '5', 'U', '6', 'y', '!' }
                                   , { '.', 'b', 'F', 'h', 't', 'f', '-', 'H', 'v' }
};
char array904[8][9] = {
                                     { '.', 'b', 'F', 'h', 't', 'f', '-', 'H', 'v' }
                                   , { 'W', 'T', 'X', '4', 'Q', '2', 'x', 'Y', '(' }
                                   , { 'j', 'g', 'm', 'w', 'Z', 'k', 'A', '=', 'n' }
                                   , { '0', 'o', 'e', 'u', 'd', 'M', 'S', 'P', ')' }
                                   , { 'i', '7', '/', 'C', 'N', 'p', 'K', 'J', 'E' }
                                   , { 'D', 'l', '9', 'L', 'O', 'B', 'G', '1', '|' }
                                   , { '8', 'z', '3', '_', 's', '^', 'R', 'c', 'r' }
                                   , { 'a', 'I', 'q', 'V', '5', 'U', '6', 'y', '!' }
};
char array905[8][9] = {
                                     { 'a', 'I', 'q', 'V', '5', 'U', '6', 'y', '!' }
                                   , { '.', 'b', 'F', 'h', 't', 'f', '-', 'H', 'v' }
                                   , { 'W', 'T', 'X', '4', 'Q', '2', 'x', 'Y', '(' }
                                   , { 'j', 'g', 'm', 'w', 'Z', 'k', 'A', '=', 'n' }
                                   , { '0', 'o', 'e', 'u', 'd', 'M', 'S', 'P', ')' }
                                   , { 'i', '7', '/', 'C', 'N', 'p', 'K', 'J', 'E' }
                                   , { 'D', 'l', '9', 'L', 'O', 'B', 'G', '1', '|' }
                                   , { '8', 'z', '3', '_', 's', '^', 'R', 'c', 'r' }
};
char array906[8][9] = {
                                     { '8', 'z', '3', '_', 's', '^', 'R', 'c', 'r' }
                                   , { 'a', 'I', 'q', 'V', '5', 'U', '6', 'y', '!' }
                                   , { '.', 'b', 'F', 'h', 't', 'f', '-', 'H', 'v' }
                                   , { 'W', 'T', 'X', '4', 'Q', '2', 'x', 'Y', '(' }
                                   , { 'j', 'g', 'm', 'w', 'Z', 'k', 'A', '=', 'n' }
                                   , { '0', 'o', 'e', 'u', 'd', 'M', 'S', 'P', ')' }
                                   , { 'i', '7', '/', 'C', 'N', 'p', 'K', 'J', 'E' }
                                   , { 'D', 'l', '9', 'L', 'O', 'B', 'G', '1', '|' }
};
char array907[8][9] = {
                                     { 'D', 'l', '9', 'L', 'O', 'B', 'G', '1', '|' }
                                   , { '8', 'z', '3', '_', 's', '^', 'R', 'c', 'r' }
                                   , { 'a', 'I', 'q', 'V', '5', 'U', '6', 'y', '!' }
                                   , { '.', 'b', 'F', 'h', 't', 'f', '-', 'H', 'v' }
                                   , { 'W', 'T', 'X', '4', 'Q', '2', 'x', 'Y', '(' }
                                   , { 'j', 'g', 'm', 'w', 'Z', 'k', 'A', '=', 'n' }
                                   , { '0', 'o', 'e', 'u', 'd', 'M', 'S', 'P', ')' }
                                   , { 'i', '7', '/', 'C', 'N', 'p', 'K', 'J', 'E' }
};
char array908[8][9] = {
                                     { 'a', 'I', 'q', 'V', '5', 'U', '6', 'y', '!' }
                                   , { 'i', '7', '/', 'C', 'N', 'p', 'K', 'J', 'E' }
                                   , { 'W', 'T', 'X', '4', 'Q', '2', 'x', 'Y', '(' }
                                   , { 'D', 'l', '9', 'L', 'O', 'B', 'G', '1', '|' }
                                   , { 'j', 'g', 'm', 'w', 'Z', 'k', 'A', '=', 'n' }
                                   , { '8', 'z', '3', '_', 's', '^', 'R', 'c', 'r' }
                                   , { '.', 'b', 'F', 'h', 't', 'f', '-', 'H', 'v' }
                                   , { '0', 'o', 'e', 'u', 'd', 'M', 'S', 'P', ')' }
};
char array909[8][9] = {
                                     { '0', 'o', 'e', 'u', 'd', 'M', 'S', 'P', ')' }
                                   , { 'W', 'T', 'X', '4', 'Q', '2', 'x', 'Y', '(' }
                                   , { 'a', 'I', 'q', 'V', '5', 'U', '6', 'y', '!' }
                                   , { '8', 'z', '3', '_', 's', '^', 'R', 'c', 'r' }
                                   , { 'D', 'l', '9', 'L', 'O', 'B', 'G', '1', '|' }
                                   , { 'j', 'g', 'm', 'w', 'Z', 'k', 'A', '=', 'n' }
                                   , { '.', 'b', 'F', 'h', 't', 'f', '-', 'H', 'v' }
                                   , { 'i', '7', '/', 'C', 'N', 'p', 'K', 'J', 'E' }
};

char array100[10][8] = {
                                     { 'i', 'D', '8', 'a', '.', 'W', 'j', '0' }
                                   , { '+', '=', ';', '#', '@', '\'', ',', ':' }
                                   , { '7', 'l', 'z', 'I', 'b', 'T', 'g', 'o' }
                                   , { '/', '9', '3', 'q', 'F', 'X', 'm', 'e' }
                                   , { 'C', 'L', '_', 'V', 'h', '4', 'w', 'u' }
                                   , { 'N', 'O', 's', '5', 't', 'Q', 'Z', 'd' }
                                   , { 'p', 'B', '^', 'U', 'f', '2', 'k', 'M' }
                                   , { 'K', 'G', 'R', '6', '-', 'x', 'A', 'S' }
                                   , { 'J', '1', 'c', 'y', 'H', 'Y', '~', 'P' }
                                   , { 'E', '|', 'r', '!', 'v', '(', 'n', ')' } };
char array101[10][8] = {
                                     { 'E', '|', 'r', '!', 'v', '(', 'n', ')' }
                                   , { 'i', 'D', '8', 'a', '.', 'W', 'j', '0' }
                                   , { '+', '=', ';', '#', '@', '\'', ',', ':' }
                                   , { '7', 'l', 'z', 'I', 'b', 'T', 'g', 'o' }
                                   , { '/', '9', '3', 'q', 'F', 'X', 'm', 'e' }
                                   , { 'C', 'L', '_', 'V', 'h', '4', 'w', 'u' }
                                   , { 'N', 'O', 's', '5', 't', 'Q', 'Z', 'd' }
                                   , { 'p', 'B', '^', 'U', 'f', '2', 'k', 'M' }
                                   , { 'K', 'G', 'R', '6', '-', 'x', 'A', 'S' }
                                   , { 'J', '1', 'c', 'y', 'H', 'Y', '~', 'P' }
};
char array102[10][8] = {
                                     { 'J', '1', 'c', 'y', 'H', 'Y', '~', 'P' }
                                   , { 'E', '|', 'r', '!', 'v', '(', 'n', ')' }
                                   , { 'i', 'D', '8', 'a', '.', 'W', 'j', '0' }
                                   , { '+', '=', ';', '#', '@', '\'', ',', ':' }
                                   , { '7', 'l', 'z', 'I', 'b', 'T', 'g', 'o' }
                                   , { '/', '9', '3', 'q', 'F', 'X', 'm', 'e' }
                                   , { 'C', 'L', '_', 'V', 'h', '4', 'w', 'u' }
                                   , { 'N', 'O', 's', '5', 't', 'Q', 'Z', 'd' }
                                   , { 'p', 'B', '^', 'U', 'f', '2', 'k', 'M' }
                                   , { 'K', 'G', 'R', '6', '-', 'x', 'A', 'S' }
};
char array103[10][8] = {
                                     { 'K', 'G', 'R', '6', '-', 'x', 'A', 'S' }
                                   , { 'J', '1', 'c', 'y', 'H', 'Y', '~', 'P' }
                                   , { 'E', '|', 'r', '!', 'v', '(', 'n', ')' }
                                   , { 'i', 'D', '8', 'a', '.', 'W', 'j', '0' }
                                   , { '+', '=', ';', '#', '@', '\'', ',', ':' }
                                   , { '7', 'l', 'z', 'I', 'b', 'T', 'g', 'o' }
                                   , { '/', '9', '3', 'q', 'F', 'X', 'm', 'e' }
                                   , { 'C', 'L', '_', 'V', 'h', '4', 'w', 'u' }
                                   , { 'N', 'O', 's', '5', 't', 'Q', 'Z', 'd' }
                                   , { 'p', 'B', '^', 'U', 'f', '2', 'k', 'M' }
};
char array104[10][8] = {
                                     { 'p', 'B', '^', 'U', 'f', '2', 'k', 'M' }
                                   , { 'K', 'G', 'R', '6', '-', 'x', 'A', 'S' }
                                   , { 'J', '1', 'c', 'y', 'H', 'Y', '~', 'P' }
                                   , { 'E', '|', 'r', '!', 'v', '(', 'n', ')' }
                                   , { 'i', 'D', '8', 'a', '.', 'W', 'j', '0' }
                                   , { '+', '=', ';', '#', '@', '\'', ',', ':' }
                                   , { '7', 'l', 'z', 'I', 'b', 'T', 'g', 'o' }
                                   , { '/', '9', '3', 'q', 'F', 'X', 'm', 'e' }
                                   , { 'C', 'L', '_', 'V', 'h', '4', 'w', 'u' }
                                   , { 'N', 'O', 's', '5', 't', 'Q', 'Z', 'd' }
};
char array105[10][8] = {
                                     { 'N', 'O', 's', '5', 't', 'Q', 'Z', 'd' }
                                   , { 'p', 'B', '^', 'U', 'f', '2', 'k', 'M' }
                                   , { 'K', 'G', 'R', '6', '-', 'x', 'A', 'S' }
                                   , { 'J', '1', 'c', 'y', 'H', 'Y', '~', 'P' }
                                   , { 'E', '|', 'r', '!', 'v', '(', 'n', ')' }
                                   , { 'i', 'D', '8', 'a', '.', 'W', 'j', '0' }
                                   , { '+', '=', ';', '#', '@', '\'', ',', ':' }
                                   , { '7', 'l', 'z', 'I', 'b', 'T', 'g', 'o' }
                                   , { '/', '9', '3', 'q', 'F', 'X', 'm', 'e' }
                                   , { 'C', 'L', '_', 'V', 'h', '4', 'w', 'u' }
};
char array106[10][8] = {
                                     { 'C', 'L', '_', 'V', 'h', '4', 'w', 'u' }
                                   , { 'N', 'O', 's', '5', 't', 'Q', 'Z', 'd' }
                                   , { 'p', 'B', '^', 'U', 'f', '2', 'k', 'M' }
                                   , { 'K', 'G', 'R', '6', '-', 'x', 'A', 'S' }
                                   , { 'J', '1', 'c', 'y', 'H', 'Y', '~', 'P' }
                                   , { 'E', '|', 'r', '!', 'v', '(', 'n', ')' }
                                   , { 'i', 'D', '8', 'a', '.', 'W', 'j', '0' }
                                   , { '+', '=', ';', '#', '@', '\'', ',', ':' }
                                   , { '7', 'l', 'z', 'I', 'b', 'T', 'g', 'o' }
                                   , { '/', '9', '3', 'q', 'F', 'X', 'm', 'e' }
};
char array107[10][8] = {
                                     { '/', '9', '3', 'q', 'F', 'X', 'm', 'e' }
                                   , { 'C', 'L', '_', 'V', 'h', '4', 'w', 'u' }
                                   , { 'N', 'O', 's', '5', 't', 'Q', 'Z', 'd' }
                                   , { 'p', 'B', '^', 'U', 'f', '2', 'k', 'M' }
                                   , { 'K', 'G', 'R', '6', '-', 'x', 'A', 'S' }
                                   , { 'J', '1', 'c', 'y', 'H', 'Y', '~', 'P' }
                                   , { 'E', '|', 'r', '!', 'v', '(', 'n', ')' }
                                   , { 'i', 'D', '8', 'a', '.', 'W', 'j', '0' }
                                   , { '+', '=', ';', '#', '@', '\'', ',', ':' }
                                   , { '7', 'l', 'z', 'I', 'b', 'T', 'g', 'o' }
};
char array108[10][8] = {
                                     { '7', 'l', 'z', 'I', 'b', 'T', 'g', 'o' }
                                   , { '/', '9', '3', 'q', 'F', 'X', 'm', 'e' }
                                   , { 'C', 'L', '_', 'V', 'h', '4', 'w', 'u' }
                                   , { 'N', 'O', 's', '5', 't', 'Q', 'Z', 'd' }
                                   , { 'p', 'B', '^', 'U', 'f', '2', 'k', 'M' }
                                   , { 'K', 'G', 'R', '6', '-', 'x', 'A', 'S' }
                                   , { 'J', '1', 'c', 'y', 'H', 'Y', '~', 'P' }
                                   , { 'E', '|', 'r', '!', 'v', '(', 'n', ')' }
                                   , { 'i', 'D', '8', 'a', '.', 'W', 'j', '0' }
                                   , { '+', '=', ';', '#', '@', '\'', ',', ':' }
};
char array109[10][8] = {
                                     { '+', '=', ';', '#', '@', '\'', ',', ':' }
                                   , { '/', '9', '3', 'q', 'F', 'X', 'm', 'e' }
                                   , { 'p', 'B', '^', 'U', 'f', '2', 'k', 'M' }
                                   , { '7', 'l', 'z', 'I', 'b', 'T', 'g', 'o' }
                                   , { 'E', '|', 'r', '!', 'v', '(', 'n', ')' }
                                   , { 'J', '1', 'c', 'y', 'H', 'Y', '~', 'P' }
                                   , { 'C', 'L', '_', 'V', 'h', '4', 'w', 'u' }
                                   , { 'N', 'O', 's', '5', 't', 'Q', 'Z', 'd' }
                                   , { 'K', 'G', 'R', '6', '-', 'x', 'A', 'S' }
                                   , { 'i', 'D', '8', 'a', '.', 'W', 'j', '0' }
};
char array110[8][10] = {
                                     { 'i', '+', '7', '/', 'C', 'N', 'p', 'K', 'J', 'E' }
                                   , { 'D', '=', 'l', '9', 'L', 'O', 'B', 'G', '1', '|' }
                                   , { '8', ';', 'z', '3', '_', 's', '^', 'R', 'c', 'r' }
                                   , { 'a', '#', 'I', 'q', 'V', '5', 'U', '6', 'y', '!' }
                                   , { '.', '@', 'b', 'F', 'h', 't', 'f', '-', 'H', 'v' }
                                   , { 'W', '\'', 'T', 'X', '4', 'Q', '2', 'x', 'Y', '(' }
                                   , { 'j', ',', 'g', 'm', 'w', 'Z', 'k', 'A', '~', 'n' }
                                   , { '0', ':', 'o', 'e', 'u', 'd', 'M', 'S', 'P', ')' } };
char array111[8][10] = {
                                     { '0', 'o', '+', 'e', 'u', 'd', 'M', 'S', 'P', ')' }
                                   , { 'i', '7', '=', '/', 'C', 'N', 'p', 'K', 'J', 'E' }
                                   , { 'D', 'l', ';', '9', 'L', 'O', 'B', 'G', '1', '|' }
                                   , { '8', 'z', '#', '3', '_', 's', '^', 'R', 'c', 'r' }
                                   , { 'a', 'I', '@', 'q', 'V', '5', 'U', '6', 'y', '!' }
                                   , { '.', 'b', '\'', 'F', 'h', 't', 'f', '-', 'H', 'v' }
                                   , { 'W', 'T', ',', 'X', '4', 'Q', '2', 'x', 'Y', '(' }
                                   , { 'j', 'g', ':', 'm', 'w', 'Z', 'k', 'A', '~', 'n' }
};
char array112[8][10] = {
                                     { 'j', 'g', 'm', '+', 'w', 'Z', 'k', 'A', '~', 'n' }
                                   , { '0', 'o', 'e', '=', 'u', 'd', 'M', 'S', 'P', ')' }
                                   , { 'i', '7', '/', ';', 'C', 'N', 'p', 'K', 'J', 'E' }
                                   , { 'D', 'l', '9', '#', 'L', 'O', 'B', 'G', '1', '|' }
                                   , { '8', 'z', '3', '@', '_', 's', '^', 'R', 'c', 'r' }
                                   , { 'a', 'I', 'q', '\'', 'V', '5', 'U', '6', 'y', '!' }
                                   , { '.', 'b', 'F', ',', 'h', 't', 'f', '-', 'H', 'v' }
                                   , { 'W', 'T', 'X', ':', '4', 'Q', '2', 'x', 'Y', '(' }
};
char array113[8][10] = {
                                     { 'W', 'T', 'X', '4', '+', 'Q', '2', 'x', 'Y', '(' }
                                   , { 'j', 'g', 'm', 'w', '=', 'Z', 'k', 'A', '~', 'n' }
                                   , { '0', 'o', 'e', 'u', ';', 'd', 'M', 'S', 'P', ')' }
                                   , { 'i', '7', '/', 'C', '#', 'N', 'p', 'K', 'J', 'E' }
                                   , { 'D', 'l', '9', 'L', '@', 'O', 'B', 'G', '1', '|' }
                                   , { '8', 'z', '3', '_', '\'', 's', '^', 'R', 'c', 'r' }
                                   , { 'a', 'I', 'q', 'V', ',', '5', 'U', '6', 'y', '!' }
                                   , { '.', 'b', 'F', 'h', ':', 't', 'f', '-', 'H', 'v' }
};
char array114[8][10] = {
                                     { '.', 'b', 'F', 'h', 't', '+', 'f', '-', 'H', 'v' }
                                   , { 'W', 'T', 'X', '4', 'Q', '=', '2', 'x', 'Y', '(' }
                                   , { 'j', 'g', 'm', 'w', 'Z', ';', 'k', 'A', '~', 'n' }
                                   , { '0', 'o', 'e', 'u', 'd', '#', 'M', 'S', 'P', ')' }
                                   , { 'i', '7', '/', 'C', 'N', '@', 'p', 'K', 'J', 'E' }
                                   , { 'D', 'l', '9', 'L', 'O', '\'', 'B', 'G', '1', '|' }
                                   , { '8', 'z', '3', '_', 's', ',', '^', 'R', 'c', 'r' }
                                   , { 'a', 'I', 'q', 'V', '5', ':', 'U', '6', 'y', '!' }
};
char array115[8][10] = {
                                     { 'a', 'I', 'q', 'V', '5', 'U', '+', '6', 'y', '!' }
                                   , { '.', 'b', 'F', 'h', 't', 'f', '=', '-', 'H', 'v' }
                                   , { 'W', 'T', 'X', '4', 'Q', '2', ';', 'x', 'Y', '(' }
                                   , { 'j', 'g', 'm', 'w', 'Z', 'k', '#', 'A', '~', 'n' }
                                   , { '0', 'o', 'e', 'u', 'd', 'M', '@', 'S', 'P', ')' }
                                   , { 'i', '7', '/', 'C', 'N', 'p', '\'', 'K', 'J', 'E' }
                                   , { 'D', 'l', '9', 'L', 'O', 'B', ',', 'G', '1', '|' }
                                   , { '8', 'z', '3', '_', 's', '^', ':', 'R', 'c', 'r' }
};
char array116[8][10] = {
                                     { '8', 'z', '3', '_', 's', '^', 'R', '+', 'c', 'r' }
                                   , { 'a', 'I', 'q', 'V', '5', 'U', '6', '=', 'y', '!' }
                                   , { '.', 'b', 'F', 'h', 't', 'f', '-', ';', 'H', 'v' }
                                   , { 'W', 'T', 'X', '4', 'Q', '2', 'x', '#', 'Y', '(' }
                                   , { 'j', 'g', 'm', 'w', 'Z', 'k', 'A', '@', '~', 'n' }
                                   , { '0', 'o', 'e', 'u', 'd', 'M', 'S', '\'', 'P', ')' }
                                   , { 'i', '7', '/', 'C', 'N', 'p', 'K', ',', 'J', 'E' }
                                   , { 'D', 'l', '9', 'L', 'O', 'B', 'G', ':', '1', '|' }
};
char array117[8][10] = {
                                     { 'D', 'l', '9', 'L', 'O', 'B', 'G', '1', '+', '|' }
                                   , { '8', 'z', '3', '_', 's', '^', 'R', 'c', '=', 'r' }
                                   , { 'a', 'I', 'q', 'V', '5', 'U', '6', 'y', ';', '!' }
                                   , { '.', 'b', 'F', 'h', 't', 'f', '-', 'H', '#', 'v' }
                                   , { 'W', 'T', 'X', '4', 'Q', '2', 'x', 'Y', '@', '(' }
                                   , { 'j', 'g', 'm', 'w', 'Z', 'k', 'A', '~', '\'', 'n' }
                                   , { '0', 'o', 'e', 'u', 'd', 'M', 'S', 'P', '\0', ')' }
                                   , { 'i', '7', '/', 'C', 'N', 'p', 'K', 'J', '\0', 'E' }
};
char array118[8][10] = {
                                     { 'a', 'I', 'q', 'V', '5', 'U', '6', 'y', '!', '+' }
                                   , { 'i', '7', '/', 'C', 'N', 'p', 'K', 'J', 'E', '=' }
                                   , { 'W', 'T', 'X', '4', 'Q', '2', 'x', 'Y', '(', ';' }
                                   , { 'D', 'l', '9', 'L', 'O', 'B', 'G', '1', '|', '#' }
                                   , { 'j', 'g', 'm', 'w', 'Z', 'k', 'A', '~', 'n', '@' }
                                   , { '8', 'z', '3', '_', 's', '^', 'R', 'c', 'r', '\'' }
                                   , { '.', 'b', 'F', 'h', 't', 'f', '-', 'H', 'v', ',' }
                                   , { '0', 'o', 'e', 'u', 'd', 'M', 'S', 'P', ')', ':' }
};
char array119[8][10] = {
                                     { '0', '+', 'o', 'e', 'u', 'd', 'M', 'S', 'P', ')' }
                                   , { 'W', '=', 'T', 'X', '4', 'Q', '2', 'x', 'Y', '(' }
                                   , { 'a', ';', 'I', 'q', 'V', '5', 'U', '6', 'y', '!' }
                                   , { '8', '#', 'z', '3', '_', 's', '^', 'R', 'c', 'r' }
                                   , { 'D', '@', 'l', '9', 'L', 'O', 'B', 'G', '1', '|' }
                                   , { 'j', '\'', 'g', 'm', 'w', 'Z', 'k', 'A', '~', 'n' }
                                   , { '.', ',', 'b', 'F', 'h', 't', 'f', '-', 'H', 'v' }
                                   , { 'i', ':', '7', '/', 'C', 'N', 'p', 'K', 'J', 'E' }
};

#pragma endregion //Packet 암호화 매트릭스


#pragma region Packet 암 / 복호화
CString Encrypt::DecodingPacketString(CString mty, CString str)
{
#pragma region
    CString rtn = _T("");
    char** ary = NULL;
    if (mty == "890") { ary = (char**)array890; }
    else if (mty == "891") { ary = (char**)array891; }
    else if (mty == "892") { ary = (char**)array892; }
    else if (mty == "893") { ary = (char**)array893; }
    else if (mty == "894") { ary = (char**)array894; }
    else if (mty == "895") { ary = (char**)array895; }
    else if (mty == "896") { ary = (char**)array896; }
    else if (mty == "897") { ary = (char**)array897; }
    else if (mty == "898") { ary = (char**)array898; }
    else if (mty == "899") { ary = (char**)array899; }
    else if (mty == "900") { ary = (char**)array900; }
    else if (mty == "901") { ary = (char**)array901; }
    else if (mty == "902") { ary = (char**)array902; }
    else if (mty == "903") { ary = (char**)array903; }
    else if (mty == "904") { ary = (char**)array904; }
    else if (mty == "905") { ary = (char**)array905; }
    else if (mty == "906") { ary = (char**)array906; }
    else if (mty == "907") { ary = (char**)array907; }
    else if (mty == "908") { ary = (char**)array908; }
    else if (mty == "909") { ary = (char**)array909; }
    else
    {
        return CString();
    }

    int nRow = sizeof(array890[0]), nCol = sizeof(array890) / sizeof(array890[0]);
    if (mty.GetAt(0) == _T('9'))nRow = sizeof(array900[0]), nCol = sizeof(array900) / sizeof(array900[0]);

    for (int i = 0; i < str.GetLength(); i += 2)
    {
        rtn += GetDencodingCodePacketChar(ary, nRow, nCol, str.Mid(i, 2));
    }

    return rtn.Trim();
#pragma endregion
}

CString Encrypt::GetDencodingCodePacketChar(char** ary, size_t sRow, size_t sCol, CString pvalue)
{
#pragma region
    CString result = _T("");

    result = ((char*)ary)[(_wtoi(pvalue.Mid(0, 1)) - 1) * sRow + (_wtoi(pvalue.Mid(1)) - 1)];
    result.Trim();

    return result;
#pragma endregion
}

/// <summary>
/// Packet 암호화. string enc = bizEncrypt.EncodingString("890", str);
/// </summary>
/// <param name="mty">890 ~ 909</param>
/// <param name="str">wzms_ko-KR_h00001/WorkZone01/bt77/er00^00^00/tp26.20^ox20.30^ps1018</param>
/// <returns></returns>
CString Encrypt::EncodingPacketString(CString mty, CString str)
{
#pragma region
    CString rtn = _T("");
    char** ary = NULL;
    if (mty == "890") { ary = (char**)array890; }
    else if (mty == "891") { ary = (char**)array891; }
    else if (mty == "892") { ary = (char**)array892; }
    else if (mty == "893") { ary = (char**)array893; }
    else if (mty == "894") { ary = (char**)array894; }
    else if (mty == "895") { ary = (char**)array895; }
    else if (mty == "896") { ary = (char**)array896; }
    else if (mty == "897") { ary = (char**)array897; }
    else if (mty == "898") { ary = (char**)array898; }
    else if (mty == "899") { ary = (char**)array899; }
    else if (mty == "900") { ary = (char**)array900; }
    else if (mty == "901") { ary = (char**)array901; }
    else if (mty == "902") { ary = (char**)array902; }
    else if (mty == "903") { ary = (char**)array903; }
    else if (mty == "904") { ary = (char**)array904; }
    else if (mty == "905") { ary = (char**)array905; }
    else if (mty == "906") { ary = (char**)array906; }
    else if (mty == "907") { ary = (char**)array907; }
    else if (mty == "908") { ary = (char**)array908; }
    else if (mty == "909") { ary = (char**)array909; }
    else
    {
        return CString();
    }

    int nRow = sizeof(array890[0]), nCol = sizeof(array890) / sizeof(array890[0]);
    if (mty.GetAt(0) == _T('9'))nRow = sizeof(array900[0]), nCol = sizeof(array900) / sizeof(array900[0]);

    for (int i = 0; i < str.GetLength(); i++)
    {
        rtn += GetEncodingCodePacketChar(ary, nRow, nCol, str.Mid(i, 1));
    }

    rtn += mty;
    return rtn.Trim();
#pragma endregion
}

CString Encrypt::GetEncodingCodePacketChar(char** ary, size_t sRow, size_t sCol, CString pvalue)
{
#pragma region
    int idx[2] = { 0, 0 };
    CString result = _T("");
    char* point = (char*)ary;

    for (int i = 0; i < sCol; i++)
    {
        for (int j = 0; j < sRow; j++)
        {
            if (pvalue.Trim() == point[i * sRow + j])
            {
                idx[0] = i + 1; idx[1] = j + 1;
            }
        }
    }
    result.Format(_T("%d%d"), idx[0], idx[1]);

    return result;
#pragma endregion
}
#pragma endregion //Packet 암/복호화

#pragma region Packet 암 / 복호화 10
/// <summary>
/// Packet 복호화. string denc = bizEncrypt.DecodingPacketString10("110", str);
/// </summary>
/// <param name="mty">110 ~ 119</param>
/// <param name="str">472337534367287571~</param>
/// <returns></returns>
CString Encrypt::DecodingPacketString10(CString mty, CString str)
{
#pragma region
    CString rtn = _T("");
    char** ary = NULL;
    if (mty == "100") { ary = (char**)array100; }
    else if (mty == "101") { ary = (char**)array101; }
    else if (mty == "102") { ary = (char**)array102; }
    else if (mty == "103") { ary = (char**)array103; }
    else if (mty == "104") { ary = (char**)array104; }
    else if (mty == "105") { ary = (char**)array105; }
    else if (mty == "106") { ary = (char**)array106; }
    else if (mty == "107") { ary = (char**)array107; }
    else if (mty == "108") { ary = (char**)array108; }
    else if (mty == "109") { ary = (char**)array109; }
    else if (mty == "110") { ary = (char**)array110; }
    else if (mty == "111") { ary = (char**)array111; }
    else if (mty == "112") { ary = (char**)array112; }
    else if (mty == "113") { ary = (char**)array113; }
    else if (mty == "114") { ary = (char**)array114; }
    else if (mty == "115") { ary = (char**)array115; }
    else if (mty == "116") { ary = (char**)array116; }
    else if (mty == "117") { ary = (char**)array117; }
    else if (mty == "118") { ary = (char**)array118; }
    else if (mty == "119") { ary = (char**)array119; }
    else
    {
        return CString();
    }

    int nRow = sizeof(*array100), nCol = sizeof(array100) / sizeof(*array100);
    if (mty.GetAt(1) == _T('1')) nRow = sizeof(*array110), nCol = sizeof(array110) / sizeof(*array110);

    for (int i = 0; i < str.GetLength(); i += 4)
    {
        //Console.WriteLine("i = " + i.ToString());
        rtn += GetDencodingCodePacketChar10(ary, nRow, nCol, str.Mid(i, 4));
    }

    return rtn.Trim();
#pragma endregion
}

CString Encrypt::GetDencodingCodePacketChar10(char** ary, size_t sRow, size_t sCol, CString pvalue)
{
#pragma region
    CString result = _T("");

    //Console.WriteLine("pvalue = " + pvalue);
    result = ((char*)ary)[(_wtoi(pvalue.Mid(0, 2)) - 1) * sRow + (_wtoi(pvalue.Mid(2)) - 1)]; //.Trim() 공백문자 때문에...
    //Console.WriteLine("GetDencodingCodePacketChar = " + result);\
    
    result.Trim();

    return result;
#pragma endregion
}

/// <summary>
/// Packet 암호화. CString enc = bizEncrypt.EncodingString10("110", str);
/// </summary>
/// <param name="mty">110 ~ 119</param>
/// <param name="str">wzms_ko-KR_h00001/WorkZone01/bt77/er00^00^00/tp26.20^ox20.30^ps1018</param>
/// <returns></returns>
CString Encrypt::EncodingPacketString10(CString mty, CString str)
{
#pragma region
    CString rtn = _T("");
    char** ary = NULL;
    if (mty == "100") { ary = (char**)array100; }
    else if (mty == "101") { ary = (char**)array101; }
    else if (mty == "102") { ary = (char**)array102; }
    else if (mty == "103") { ary = (char**)array103; }
    else if (mty == "104") { ary = (char**)array104; }
    else if (mty == "105") { ary = (char**)array105; }
    else if (mty == "106") { ary = (char**)array106; }
    else if (mty == "107") { ary = (char**)array107; }
    else if (mty == "108") { ary = (char**)array108; }
    else if (mty == "109") { ary = (char**)array109; }
    else if (mty == "110") { ary = (char**)array110; }
    else if (mty == "111") { ary = (char**)array111; }
    else if (mty == "112") { ary = (char**)array112; }
    else if (mty == "113") { ary = (char**)array113; }
    else if (mty == "114") { ary = (char**)array114; }
    else if (mty == "115") { ary = (char**)array115; }
    else if (mty == "116") { ary = (char**)array116; }
    else if (mty == "117") { ary = (char**)array117; }
    else if (mty == "118") { ary = (char**)array118; }
    else if (mty == "119") { ary = (char**)array119; }
    else
    {
        return CString();
    }

    int nRow = sizeof(*array100), nCol = sizeof(array100) / sizeof(*array100);
    if (mty.GetAt(1) == _T('1')) nRow = sizeof(*array110), nCol = sizeof(array110) / sizeof(*array110);


    for (int i = 0; i < str.GetLength(); i++)
    {
        rtn += GetEncodingCodePacketChar10(ary, nRow, nCol, str.Mid(i, 1));
    }
    rtn += mty;
    return rtn.Trim();
#pragma endregion
}

CString Encrypt::GetEncodingCodePacketChar10(char** ary, size_t sRow, size_t sCol, CString pvalue)
{
#pragma region
    int idx[2] = { 0, 0 };
    CString result = _T("");
    char* point = (char*)ary;

    for (int i = 0; i < sCol; i++)
    {
        for (int j = 0; j < sRow; j++)
        {
            if (pvalue.Trim() == point[i * sRow + j])
            {
                idx[0] = i + 1; idx[1] = j + 1;
            }
        }
    }
    result.Format(_T("%02d%02d"), idx[0], idx[1]);
    //Console.WriteLine("GetEncodingCodePacketChar = " + result);

    return result;
#pragma endregion
}
#pragma endregion //Packet 암/복호화


CString Encrypt::bizEncode(CString str, int mty)
{
    CString sEncode = _T("");
    CString Mty = _T(""); Mty.Format(_T("%d"), mty);
    if (890 <= mty && mty <= 909)
        sEncode = EncodingPacketString(Mty, str);
    else if (100 <= mty && mty <= 119)
        sEncode = EncodingPacketString10(Mty, str);
    return sEncode;
}
CString Encrypt::bizDecode(CString str)
{
    CString Mty = str.Right(3);
    int mty = _wtoi(Mty);
    CString sPacketData;
    str = str.Mid(0, str.GetLength() - 3);

    if (890 <= mty && mty <= 909)
        sPacketData = DecodingPacketString(Mty, str);
    else if (100 <= mty && mty <= 119)
        sPacketData = DecodingPacketString10(Mty, str);
    return sPacketData;
}

CString Encrypt::Encoding100(CString data, CString* ret)
{
    // TODO: Add your implementation code here.
    //CString ss = _T("070805040604050506070802090207010305030702020202100");

    int random = rand();
    int mty = (int)(random * (20.0 / (double)RAND_MAX)) + 100;

    CString rets = bizEncode(data, mty);

    if (ret)*ret = rets;
    return rets;
}
CString Encrypt::Encoding800(CString data, CString* ret)
{
    // TODO: Add your implementation code here.
    //CString ss = _T("070805040604050506070802090207010305030702020202100");

    int mty = (int)(rand() * (20 / (double)RAND_MAX)) + 890;

    CString rets = bizEncode(data, mty);

    if (ret)*ret = rets;
    return rets;
}

CString Encrypt::Base64Encoding(CString data, CString* ret)
{
    CString res = Encoding(data);
    if (ret)*ret = res;
    return res;
}